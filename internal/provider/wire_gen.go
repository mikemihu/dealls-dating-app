// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"dealls-dating-app/internal/app"
	"dealls-dating-app/internal/config"
	"dealls-dating-app/internal/delivery"
	"dealls-dating-app/internal/delivery/middleware"
	"dealls-dating-app/internal/repository"
	"dealls-dating-app/internal/usecase"
)

// Injectors from wire.go:

func ProvideApp() *app.App {
	cfg := config.Get()
	zapLogger := LoggerProvider()
	echojwtConfig := JWTConfigProvider(cfg)
	gormDB := DatabaseProvider(cfg)
	userRepo := repository.NewUserRepo(cfg, gormDB)
	packageRepo := repository.NewPackageRepo(cfg, gormDB)
	userUC := usecase.NewUserUC(cfg, zapLogger, userRepo, packageRepo)
	middlewareMiddleware := middleware.NewMiddleware(cfg, zapLogger, echojwtConfig, userUC)
	userDelivery := delivery.NewUserDelivery(cfg, userUC)
	profileRepo := repository.NewProfileRepo(cfg, gormDB)
	profileUC := usecase.NewProfileUC(zapLogger, profileRepo)
	profileDelivery := delivery.NewProfileDelivery(cfg, profileUC)
	likeRepo := repository.NewLikeRepo(cfg, gormDB)
	client := RedisProvider(cfg)
	swipeRepo := repository.NewSwipeRepo(cfg, client)
	swipeUC := usecase.NewSwipeUC(zapLogger, profileRepo, likeRepo, swipeRepo, userUC)
	swipeDelivery := delivery.NewSwipeDelivery(cfg, swipeUC)
	likeUC := usecase.NewLikeUC(cfg, zapLogger, likeRepo, userUC)
	likeDelivery := delivery.NewLikeDelivery(cfg, likeUC)
	appApp := app.New(cfg, zapLogger, echojwtConfig, middlewareMiddleware, userDelivery, profileDelivery, swipeDelivery, likeDelivery)
	return appApp
}

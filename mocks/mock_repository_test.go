// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "dealls-dating-app/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUserRepo) Get(ctx context.Context, filter entity.UserFilter) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, filter)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepoMockRecorder) Get(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepo)(nil).Get), ctx, filter)
}

// Store mocks base method.
func (m *MockUserRepo) Store(ctx context.Context, user entity.User) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, user)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockUserRepoMockRecorder) Store(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockUserRepo)(nil).Store), ctx, user)
}

// StorePackage mocks base method.
func (m *MockUserRepo) StorePackage(ctx context.Context, userPackage entity.UserPackage) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePackage", ctx, userPackage)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorePackage indicates an expected call of StorePackage.
func (mr *MockUserRepoMockRecorder) StorePackage(ctx, userPackage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePackage", reflect.TypeOf((*MockUserRepo)(nil).StorePackage), ctx, userPackage)
}

// MockProfileRepo is a mock of ProfileRepo interface.
type MockProfileRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProfileRepoMockRecorder
}

// MockProfileRepoMockRecorder is the mock recorder for MockProfileRepo.
type MockProfileRepoMockRecorder struct {
	mock *MockProfileRepo
}

// NewMockProfileRepo creates a new mock instance.
func NewMockProfileRepo(ctrl *gomock.Controller) *MockProfileRepo {
	mock := &MockProfileRepo{ctrl: ctrl}
	mock.recorder = &MockProfileRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileRepo) EXPECT() *MockProfileRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockProfileRepo) Get(ctx context.Context, filter entity.ProfileFilter) ([]entity.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, filter)
	ret0, _ := ret[0].([]entity.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProfileRepoMockRecorder) Get(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProfileRepo)(nil).Get), ctx, filter)
}

// Store mocks base method.
func (m *MockProfileRepo) Store(ctx context.Context, profile entity.Profile) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, profile)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockProfileRepoMockRecorder) Store(ctx, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockProfileRepo)(nil).Store), ctx, profile)
}

// MockPackageRepo is a mock of PackageRepo interface.
type MockPackageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPackageRepoMockRecorder
}

// MockPackageRepoMockRecorder is the mock recorder for MockPackageRepo.
type MockPackageRepoMockRecorder struct {
	mock *MockPackageRepo
}

// NewMockPackageRepo creates a new mock instance.
func NewMockPackageRepo(ctrl *gomock.Controller) *MockPackageRepo {
	mock := &MockPackageRepo{ctrl: ctrl}
	mock.recorder = &MockPackageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageRepo) EXPECT() *MockPackageRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPackageRepo) Get(ctx context.Context, filter entity.PackageFilter) ([]entity.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, filter)
	ret0, _ := ret[0].([]entity.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPackageRepoMockRecorder) Get(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPackageRepo)(nil).Get), ctx, filter)
}

// Store mocks base method.
func (m *MockPackageRepo) Store(ctx context.Context, pkg entity.Package) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, pkg)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockPackageRepoMockRecorder) Store(ctx, pkg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockPackageRepo)(nil).Store), ctx, pkg)
}

// MockLikeRepo is a mock of LikeRepo interface.
type MockLikeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLikeRepoMockRecorder
}

// MockLikeRepoMockRecorder is the mock recorder for MockLikeRepo.
type MockLikeRepoMockRecorder struct {
	mock *MockLikeRepo
}

// NewMockLikeRepo creates a new mock instance.
func NewMockLikeRepo(ctrl *gomock.Controller) *MockLikeRepo {
	mock := &MockLikeRepo{ctrl: ctrl}
	mock.recorder = &MockLikeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikeRepo) EXPECT() *MockLikeRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockLikeRepo) Get(ctx context.Context, filter entity.LikeFilter) ([]entity.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, filter)
	ret0, _ := ret[0].([]entity.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLikeRepoMockRecorder) Get(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLikeRepo)(nil).Get), ctx, filter)
}

// Store mocks base method.
func (m *MockLikeRepo) Store(ctx context.Context, like entity.Like) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, like)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockLikeRepoMockRecorder) Store(ctx, like interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockLikeRepo)(nil).Store), ctx, like)
}

// MockSwipeRepo is a mock of SwipeRepo interface.
type MockSwipeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSwipeRepoMockRecorder
}

// MockSwipeRepoMockRecorder is the mock recorder for MockSwipeRepo.
type MockSwipeRepoMockRecorder struct {
	mock *MockSwipeRepo
}

// NewMockSwipeRepo creates a new mock instance.
func NewMockSwipeRepo(ctrl *gomock.Controller) *MockSwipeRepo {
	mock := &MockSwipeRepo{ctrl: ctrl}
	mock.recorder = &MockSwipeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwipeRepo) EXPECT() *MockSwipeRepoMockRecorder {
	return m.recorder
}

// Store mocks base method.
func (m *MockSwipeRepo) Store(ctx context.Context, userID, targetUserID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, userID, targetUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockSwipeRepoMockRecorder) Store(ctx, userID, targetUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockSwipeRepo)(nil).Store), ctx, userID, targetUserID)
}

// TodayProfiles mocks base method.
func (m *MockSwipeRepo) TodayProfiles(ctx context.Context, userID uuid.UUID) (uuid.UUIDs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TodayProfiles", ctx, userID)
	ret0, _ := ret[0].(uuid.UUIDs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TodayProfiles indicates an expected call of TodayProfiles.
func (mr *MockSwipeRepoMockRecorder) TodayProfiles(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TodayProfiles", reflect.TypeOf((*MockSwipeRepo)(nil).TodayProfiles), ctx, userID)
}
